{"version":3,"sources":["../../src/app/services/user.service.ts"],"names":[],"mappings":"AAAA;;GAEG;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BAFH;;eAEG;YASU,WAAW;gBACpB,qBAAoB,IAAU;oBAAV,SAAI,GAAJ,IAAI,CAAM;gBAAI,CAAC;gBAEnC,eAAe;gBACf,mCAAa,GAAb;oBACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,eAAM,CAAC,QAAQ,GAAG,WAAW,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,UAAC,QAAkB,IAAK,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC,CAAC;gBACjH,CAAC;gBAED,4BAAM,GAAN;oBACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,UAAC,QAAkB,IAAK,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC,CAAC;gBAChG,CAAC;gBAED,6BAAO,GAAP,UAAQ,EAAU;oBACd,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,GAAG,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,UAAC,QAAkB,IAAK,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC,CAAC;gBACtG,CAAC;gBAED,4BAAM,GAAN,UAAO,IAAsB;oBACzB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,UAAC,QAAkB,IAAK,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC,CAAC;gBACvG,CAAC;gBAED,uBAAuB;gBACvB,oHAAoH;gBACpH,IAAI;gBAEJ,uBAAuB;gBACvB,4GAA4G;gBAC5G,IAAI;gBAEJ,yBAAyB;gBAEjB,yBAAG,GAAX;oBACI,6CAA6C;oBAC7C,IAAI,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;oBAClE,EAAE,CAAC,CAAC,WAAW,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;wBACnC,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAE,eAAe,EAAE,SAAS,GAAG,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC;wBAC9E,MAAM,CAAC,IAAI,qBAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;oBACpD,CAAC;gBACL,CAAC;gBACL,kBAAC;YAAD,CAtCA,AAsCC,IAAA;YAtCY,WAAW;gBADvB,iBAAU,EAAE;iDAEiB,WAAI;eADrB,WAAW,CAsCvB;;QACD,CAAC","file":"user.service.js","sourcesContent":["/**\r\n * Created by B51-80 on 2017-02-21.\r\n */\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { Headers, RequestOptions, Response, Http} from '@angular/http';\r\nimport {RegistrationData} from \"../interfaces/registrationData.interface\";\r\nimport 'rxjs/add/operator/map';\r\nimport {Consts} from \"../consts/Consts\";\r\n\r\n@Injectable()\r\nexport class UserService {\r\n    constructor(private http: Http) { }\r\n\r\n    //for a testing\r\n    greetingServe() {\r\n        return this.http.get(Consts.APP_PATH + '/greeting', this.jwt()).map((response: Response) => response.json());\r\n    }\r\n\r\n    getAll() {\r\n        return this.http.get('/api/users', this.jwt()).map((response: Response) => response.json());\r\n    }\r\n\r\n    getById(id: number) {\r\n        return this.http.get('/api/users/' + id, this.jwt()).map((response: Response) => response.json());\r\n    }\r\n\r\n    create(user: RegistrationData) {\r\n        return this.http.post('/api/users', user, this.jwt()).map((response: Response) => response.json());\r\n    }\r\n\r\n    // update(user: User) {\r\n    //     return this.http.put('/api/users/' + user.id, user, this.jwt()).map((response: Response) => response.json());\r\n    // }\r\n\r\n    // delete(id: number) {\r\n    //     return this.http.delete('/api/users/' + id, this.jwt()).map((response: Response) => response.json());\r\n    // }\r\n\r\n    // private helper methods\r\n\r\n    private jwt() {\r\n        // create authorization header with jwt token\r\n        let currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n        if (currentUser && currentUser.token) {\r\n            let headers = new Headers({ 'Authorization': 'Bearer ' + currentUser.token });\r\n            return new RequestOptions({ headers: headers });\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":"/src"}