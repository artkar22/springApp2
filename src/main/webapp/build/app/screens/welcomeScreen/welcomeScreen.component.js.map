{"version":3,"sources":["../../src/app/screens/welcomeScreen/welcomeScreen.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;YASM,oBAAoB,GAAU,cAAc,CAAC;YAC7C,oBAAoB,GAAU,cAAc,CAAC;YAC7C,sBAAsB,GAAU,2BAA2B,CAAC;YAC5D,sBAAsB,GAAU,+BAA+B,CAAC;YAOzD,aAAa;gBAStB,uBAAoB,WAAuB;oBAA3C,iBACC;oBADmB,gBAAW,GAAX,WAAW,CAAY;oBANpC,eAAU,GAAc,EAAE,CAAC;oBAC3B,qBAAgB,GAAsC,EAAE,CAAC;oBAEzD,kBAAa,GAAU,OAAO,CAAC;oBAC/B,oBAAe,GAAU,EAAE,CAAC;oBAS5B,oBAAe,GAAG;wBACrB,IAAI,EAAE,GAAG,KAAI,CAAC;wBACd,KAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAI,CAAC,gBAAgB,CAAC;6BACzC,SAAS,CACN,UAAA,IAAI;4BACA,EAAE,CAAC,aAAa,GAAG,oBAAoB,CAAC;4BACxC,EAAE,CAAC,eAAe,GAAG,sBAAsB,CAAC;4BAC5C,EAAE,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;4BACtB,yGAAyG;4BACzG,gBAAgB;wBACpB,CAAC,EACD,UAAA,KAAK;4BACD,eAAe;4BACf,EAAE,CAAC,aAAa,GAAG,oBAAoB,CAAC;4BACxC,EAAE,CAAC,eAAe,GAAG,sBAAsB,CAAC;4BAC5C,EAAE,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;wBAC1B,CAAC,CAAC,CAAC;oBACf,CAAC,CAAA;oBAEM,8BAAyB,GAAG;wBAC/B,MAAM,CAAC,CAAC,CAAC,KAAI,CAAC,gBAAgB,CAAC,QAAQ,IAAI,KAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC;4BACpF,KAAI,CAAC,gBAAgB,CAAC,QAAQ,IAAI,KAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC;4BAC3E,KAAI,CAAC,gBAAgB,CAAC,gBAAgB,IAAI,KAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;oBACjG,CAAC,CAAA;gBA7BD,CAAC;gBAED,gCAAQ,GAAR;oBACI,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;gBAC5B,CAAC;gBA2BM,6BAAK,GAAZ;oBACI,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC,SAAS,CACtC,UAAA,IAAI;wBACA,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;wBAClB,yGAAyG;wBACzG,gBAAgB;oBACpB,CAAC,EACD,UAAA,KAAK;wBACD,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;oBACxB,CAAC,CAAC,CAAC;gBACX,CAAC;gBACL,oBAAC;YAAD,CApDA,AAoDC,IAAA;YAnD2B;gBAAvB,gBAAS,CAAC,mCAAW,CAAC;0CAAa,mCAAW;8DAAC;YADvC,aAAa;gBALzB,gBAAS,CAAC;oBACP,QAAQ,EAAE,SAAS;oBACnB,WAAW,EAAE,gDAAgD;oBAC7D,SAAS,EAAE,CAAC,sDAAsD,CAAC;iBACtE,CAAC;iDAUkC,0BAAW;eATlC,aAAa,CAoDzB;;QAAA,CAAC","file":"welcomeScreen.component.js","sourcesContent":["/**\n * Created by Artur on 2017-02-10.\n */\nimport {Component, OnInit, ViewChild} from \"@angular/core\";\nimport {User} from \"../../interfaces/user.interface\";\nimport {RegistrationData} from \"../../interfaces/registrationData.interface\";\nimport {UserService} from \"../../services/user.service\";\nimport {InformModal} from \"../../modals/infoModal/informModal.component\";\n\nconst registerSuccessTitle:String = \"Gratulujemy!\";\nconst registerFailureTitle:String = \"Ostrzeżenie!\";\nconst registerSuccessMessage:String = \"Rejestracja powiodła się!\";\nconst registerFailureMessage:String = \"Rejestracja nie powiodła się!\";\n\n@Component({\n    selector: 'welcome',\n    templateUrl: './app/screens/welcomeScreen/welcomeScreen.html',\n    styleUrls: ['./app/screens/welcomeScreen/welcomeScreen.style.scss'],\n})\nexport class WelcomeScreen implements OnInit {\n    @ViewChild(InformModal) informModal:InformModal;\n\n    public logingData:User = <User>{};\n    public registrationData:RegistrationData = <RegistrationData>{};\n\n    public registerTitle:String = \"Uwaga\";\n    public registerMessage:String = \"\";\n\n    constructor(private userService:UserService) {\n    }\n\n    ngOnInit():void {\n        console.log(\"WELCOME!\");\n    }\n\n    public registerNewUser = () => {\n        let vm = this;\n        this.userService.create(this.registrationData)\n            .subscribe(\n                data => {\n                    vm.registerTitle = registerSuccessTitle;\n                    vm.registerMessage = registerSuccessMessage;\n                    vm.informModal.show();\n                    // set success message and pass true paramater to persist the message after redirecting to the login page\n                    //here info moda\n                },\n                error => {\n                    //hereInfoModal\n                    vm.registerTitle = registerFailureTitle;\n                    vm.registerMessage = registerFailureMessage;\n                    vm.informModal.show();\n                });\n    }\n\n    public isRegisterFieldsFullfiled = ():boolean => {\n        return !(this.registrationData.username && this.registrationData.username.length > 0 &&\n        this.registrationData.password && this.registrationData.password.length > 0 &&\n        this.registrationData.confirm_password && this.registrationData.confirm_password.length > 0);\n    }\n\n    public logIn():void {\n        this.userService.greetingServe().subscribe(\n            data => {\n                console.log(data);\n                // set success message and pass true paramater to persist the message after redirecting to the login page\n                //here info moda\n            },\n            error => {\n                console.log(\"błąd\");\n            });\n    }\n}"],"sourceRoot":"/src"}